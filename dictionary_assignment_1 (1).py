# -*- coding: utf-8 -*-
"""Dictionary.Assignment 1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nv6r9WkYjEfVu-pDGKUwNF9U-cyv_W4-
"""

#Python | Sort Python Dictionaries by Key or Value.
P1 = {'apple': 5, 'banana': 3, 'cherry': 10}
P2 = dict(sorted(P1.items()))
print(P2)

#Handling missing keys in Python dictionaries.
K1 = {'name': 'Alice', 'age': 30}
age = K1.get('age', 0)
K2 = K1.get('city', 'Unknown')

print(age)
print(K2)

#Python dictionary with keys having multiple inputs.
J1 = {(1, "Peter", "Mathew"): {"a": "Javatpoint", "b": "Software", "c": 15000},
    (2, "Will", "Smith"): {"e": 30, "f": "For", "g": 90000},
    (3, "Michel", "Johnson"): {"h": 12, "i": "Val", "j": "Javatpoint"},
    (4, "Alice", "Lee"): {"k": 40, "l": "Marketing", "m": 100000}}
print(J1[(1, "Peter", "Mathew")]["a"])
print(J1[(2, "Will", "Smith")]["f"])

#Python program to find the sum of all items in a dictionary.
V1 = {"apple": 10, "banana": 20, "cherry": 30}
V2 = sum(V1.values())
print(f"The sum of all items in the dictionary: {V2}")

#Python program to find the size of a Dictionary.
H1 = {"apple": 10, "banana": 20, "cherry": 30}
H2 = len(H1)
print(f"The dictionary has {H2} elements.")

#Ways to sort list of dictionaries by values in Python – Using itemg etter.
data = [
    {'name': 'Alice', 'age': 30, 'score': 95},
    {'name': 'Bob', 'age': 25, 'score': 88},
    {'name': 'Charlie', 'age': 35, 'score': 79},]
data.sort(key=lambda x: x['score'])
print(data)

#Ways to sort list of dictionaries by values in Python – Using lambda function.
# Sample list of dictionaries
data = [{"name": "Alice", "age": 30, "score": 90},
    {"name": "Bob", "age": 25, "score": 85},
    {"name": "Charlie", "age": 35, "score": 78},]

#(Ascending)
P1 = sorted(data, key=lambda x: x['name'])
print(P1)

#(Descending)
P2 = sorted(data, key=lambda x: x['score'], reverse=True)
print(P2)

#(multiple values)
P3 = sorted(data, key=lambda x: (x['age'], x['score']))
print(P3)

#Python | Merging two Dictionaries.
G1 = {"name": "Alice", "age": 30}
G2 = {"city": "New York", "score": 90}
G1.update(G2)
print(G1)

#Program to create grade calculator in Python.
def calculate_grade(score):
  if score >= 90:
    return "A"
  elif score >= 80:
    return "B"
  elif score >= 70:
    return "C"
  elif score >= 60:
    return "D"
  else:
    return "F"
def main():
  try:
    score = float(input("Enter your score (0-100): "))
    if 0 <= score <= 100:
      letter_grade = calculate_grade(score)
      print(f"Your score of {score} corresponds to a letter grade of {letter_grade}.")
    else:
      print("Invalid score. Please enter a value between 0 and 100.")
  except ValueError:
    print("Invalid input. Please enter a numerical value.")

if __name__ == "__main__":
  main()

#Python – Insertion at the beginning in OrderedDict.
from collections import OrderedDict

data = OrderedDict([('a', 1), ('b', 2), ('c', 3)])
A1 = 'x'
A2 = 0
data.update({A1: A2})
data.move_to_end(A1, last=False)
print(data)

#Python | Check order of character in string using OrderedDict( ).
from collections import OrderedDict

def check_order(string, pattern):

  S1 = OrderedDict.fromkeys(string)
  ptr = 0
  for key in S1:
    if key == pattern[ptr]:
      ptr += 1
    if ptr == len(pattern):
      return True
  return False
string = "geeksforgeeks"
pattern = "geeks"

if check_order(string, pattern):
  print("The string contains the pattern")
else:
  print("The string does not contain the pattern")

#Python | Find common elements in three sorted arrays by dictionary intersection.
def L1(arr1, arr2, arr3):
  D1 = counter(aar1)
  D2 = counter(arr2)
  D3 = counter(arr3)
  result = list((D1 & D2 & D3).elements())
  result.sort()
  return result
  arr1 = [1,2,3,4,5]
  arr2 = [1,2,5,7,9]
  arr3 = [1,3,4,5,8]
  result = L1(arr1, arr2, arr3)
  print(result)

#Dictionary and counter in Python to find winner of election.
def winner(input):
  L1 = Counter(input)
  L2 = L1.most_common(2)
  if ans[0][1] == L2[1][1]:
    print(L2[0][0], "and", L2[1][0])
  else:
    print(L2[0][0])

#Python – Key with maximum unique values.
J1 = {'A': [1, 2, 3, 1, 2],
    'B': [4, 5, 6, 7, 8],
    'C': [9, 10, 9, 10, 9]}

J2 = max(J1, key=lambda k: len(set(J1[k])))
print(J2)

#Find all duplicate characters in string.
P1 = "hello world"
P2 = {}
for char in P1:
  if char in P2:
    P2[char] += 1
  else:
    P2[char] = 1
    for char, count in P2.items():
      if count > 1:
        print(char, count)

#Python – Group Similar items to Dictionary Values List.
data = ["apple", "banana", "apple", "orange", "banana"]
result = {}
for item in data:
  if item in result:
    result[item].append(item)
  else:
    result[item] = [item]
print(result)

#K’th Non-repeating Character in Python using List Comprehension and OrderedDict.
O1 = "geeksforgeeks"
O2 = {}
for char in O1:
  if char in O2:
    O2[char] += 1
  else:
    O2[char] = 1
O3 = [key for key, value in O2.items() if value == 1]
if len(O3) >= k:
  print(O3[k - 1])
else:
  print("No non-repeating character found")

#Python – Replace String by Kth Dictionary value.
P2 = {"a": 1, "b": 2, "c": 3}
P1 = "abc"
P3 = ""
for char in P1:
  if char in P2:
    P3 += str(P2[char])
  else:
    P3 += char
print(P3)

#Python | Ways to remove a key from dictionary.
M1 = {"a": 1, "b": 2, "c": 3}
del M1["a"]
print(M1)

#Python – Replace words from Dictionary.
S1 = "This is a sample sentence"
S2 = {"This": "That", "is": "was", "a": "the"}
S3 = S1.split()
S4 = []
for word in S3:
  if word in S2:
    S4.append(S2[word])
  else:
    S4.append(word)
    S5 = " ".join(S4)
    print(S5)

#Python – Remove Dictionary Key Words.
D1 = {"name": "Alice", "age": 30, "city": "New York"}
D2 = ["name", "age"]
D3 = {key: value for key, value in D1.items() if key not in D2}
print(D3)

#Python | Remove all duplicates words from a given sentence.
T1 = "This is a sample sentence with some duplicate words"
T2 = T1.split()
T3 = []
for word in T2:
  if word not in T3:
    T3.append(word)
    T4 = " ".join(T3)
    print(T4)

#Python – Remove duplicate values across Dictionary Values.
D1 = {"a": [1, 2, 3], "b": [2, 3, 4], "c": [3, 4, 5]}
D2 = {}
for key, value in D1.items():
  D2[key] = list(set(value))
print(D2)

#Python Dictionary to find mirror characters in a string.
def mirrorChars(input,k):
  original = "abcdefghijklmnopqrstuvwxyz"
  reverse = "zyxwvutsrqponmlkjihgfedcba"
  dictChars = dict(zip(original,reverse))
  prefix = input[0:k-1]
  suffix = input[k-1:]
  mirror = ""
  for i in range(0,len(suffix)):
    mirror = mirror + dictChars[suffix[i]]
  return prefix + mirror
  input = 'paradox'
  k = 3
  print(mirrorChars(input,k))
  inputq = 'pneumonia'
  k = 5
  print(mirrorChars(input,k))

#Counting the frequencies in a list using dictionary in Python.
L1 = [1, 1, 1, 5, 5, 3, 1, 3, 3, 1, 4,]
L2 = {}
for item in L1:
  if item in L2:
    L2[item] += 1
  else:
    L2[item] = 1
    print(L2)
    for key, value in L2.items():
      print(key, value)

#Python – Dictionary Values Mean.
M1 = {"a": [1, 2, 3], "b": [2, 3, 4], "c": [3, 4, 5]}
M2 = {}
for key, value in M1.items():
  M2[key] = sum(value) / len(value)
print(M2)

#Python counter and dictionary intersection example (Make a string using deletion and rearrangement).
from collections import Counter
def make_string(str1, str2):
  freq1 = Counter(str1)
  freq2 = Counter(str2)
  common_chars = freq1 & freq2
  result = ''.join(common_chars.elements())
  return result
  str1 = "ABDC"
  str2 = "BAD"
  result = make_string(str1, str2)
  print(result)
  str1 = "ABDC"
  str2 = "ABC"
  result = make_string(str1, str2)
  print(result)
  str1 = "ABBC"
  str2 = "ADCB"
  result = make_string(str1, str2)
  print(result)
  str1 = "ABBC"
  str2 = "CDBA"
  result = make_string(str1, str2)
  print(result)

#Python dictionary, set and counter to check if frequencies can become same
from collections import Counter
def all_same(input):
  freq = Counter(input)
  values = list(freq.values())
  unique_values = set(values)
  if len(unique_values) <= 2:
    min_freq = min(values)
    max_freq = max(values)
    if max_freq - min_freq <= 1:
      return True
  return False
  input = 'xxxyyzz'
  if all_same(input):
    print("Yes")
  else:
    print("No")
    input = 'xyyzz'
    if all_same(input):
      print("Yes")
    else:
      print("No")
      input = 'xyyzzzzz'
      if all_same(input):
        print("Yes")
      else:
        print("No")
        input = 'xyyyzz'
        if all_same(input):
          print("Yes")
        else:
          print("No")
          input = 'xyyzz'
          if all_same(input):
            print("Yes")
          else:
            print("No")
            input = 'xyzz'
            if all_same(input):
              print("Yes")
            else:
              print("No")
              input = 'xyzz'
              if all_same(input):
                print("Yes")
              else:
                print("No")
                input = 'xyzz'
                if all_same(input):
                  print("Yes")
                else:
                  print("No")

#Scraping And Finding Ordered Words In A Dictionary using Python.
import requests
from bs4 import BeautifulSoup
def get_words_from_url(url):
  response = requests.get(url)
  soup = BeautifulSoup(response.text, 'html.parser')
  words = []
  for word in soup.stripped_strings:
    words.append(word)
  return words
  url = "https://www.mit.edu/~ecprice/wordlist.10000"
  words = get_words_from_url(url)
  ordered_words = []
  for word in words:
    if ''.join(sorted(word)) == word:
      ordered_words.append(word)
  return ordered_words
  ordered_words = get_words_from_url(url)
  print(ordered_words)

#Possible Words using given characters in Python.

#Python – Maximum record value key in dictionary.
H1 = {"a": [1, 2, 3], "b": [2, 3, 4], "c": [3, 4, 5]}
H2 = {}
for key, value in H1.items():
  H2[key] = max(value)
  H3 = max(H2, key=H2.get)
  print(H3)

#Python – Extract values of Particular Key in Nested Values.
D1 = {"a": 1, "b": {"c": 2, "d": 3}, "e": 4}
D2 = D1["b"]
D3 = list(D2.values())
print(D3)

